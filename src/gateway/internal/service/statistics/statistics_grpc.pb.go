// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: statistics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatisticsServiceClient is the client API for StatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsServiceClient interface {
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePost(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPostStatistics(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*PostStatistics, error)
	GetTopKPosts(ctx context.Context, in *TopKRequest, opts ...grpc.CallOption) (*TopPosts, error)
	GetTopKUsers(ctx context.Context, in *TopKRequest, opts ...grpc.CallOption) (*TopUsers, error)
}

type statisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsServiceClient(cc grpc.ClientConnInterface) StatisticsServiceClient {
	return &statisticsServiceClient{cc}
}

func (c *statisticsServiceClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/statistics_proto.StatisticsService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) DeletePost(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/statistics_proto.StatisticsService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetPostStatistics(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*PostStatistics, error) {
	out := new(PostStatistics)
	err := c.cc.Invoke(ctx, "/statistics_proto.StatisticsService/GetPostStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetTopKPosts(ctx context.Context, in *TopKRequest, opts ...grpc.CallOption) (*TopPosts, error) {
	out := new(TopPosts)
	err := c.cc.Invoke(ctx, "/statistics_proto.StatisticsService/GetTopKPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetTopKUsers(ctx context.Context, in *TopKRequest, opts ...grpc.CallOption) (*TopUsers, error) {
	out := new(TopUsers)
	err := c.cc.Invoke(ctx, "/statistics_proto.StatisticsService/GetTopKUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServiceServer is the server API for StatisticsService service.
// All implementations must embed UnimplementedStatisticsServiceServer
// for forward compatibility
type StatisticsServiceServer interface {
	DeleteUser(context.Context, *UserId) (*emptypb.Empty, error)
	DeletePost(context.Context, *PostId) (*emptypb.Empty, error)
	GetPostStatistics(context.Context, *PostId) (*PostStatistics, error)
	GetTopKPosts(context.Context, *TopKRequest) (*TopPosts, error)
	GetTopKUsers(context.Context, *TopKRequest) (*TopUsers, error)
	mustEmbedUnimplementedStatisticsServiceServer()
}

// UnimplementedStatisticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsServiceServer struct {
}

func (UnimplementedStatisticsServiceServer) DeleteUser(context.Context, *UserId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedStatisticsServiceServer) DeletePost(context.Context, *PostId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedStatisticsServiceServer) GetPostStatistics(context.Context, *PostId) (*PostStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) GetTopKPosts(context.Context, *TopKRequest) (*TopPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopKPosts not implemented")
}
func (UnimplementedStatisticsServiceServer) GetTopKUsers(context.Context, *TopKRequest) (*TopUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopKUsers not implemented")
}
func (UnimplementedStatisticsServiceServer) mustEmbedUnimplementedStatisticsServiceServer() {}

// UnsafeStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServiceServer will
// result in compilation errors.
type UnsafeStatisticsServiceServer interface {
	mustEmbedUnimplementedStatisticsServiceServer()
}

func RegisterStatisticsServiceServer(s grpc.ServiceRegistrar, srv StatisticsServiceServer) {
	s.RegisterService(&StatisticsService_ServiceDesc, srv)
}

func _StatisticsService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics_proto.StatisticsService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics_proto.StatisticsService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).DeletePost(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetPostStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetPostStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics_proto.StatisticsService/GetPostStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetPostStatistics(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetTopKPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetTopKPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics_proto.StatisticsService/GetTopKPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetTopKPosts(ctx, req.(*TopKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetTopKUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetTopKUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics_proto.StatisticsService/GetTopKUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetTopKUsers(ctx, req.(*TopKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticsService_ServiceDesc is the grpc.ServiceDesc for StatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistics_proto.StatisticsService",
	HandlerType: (*StatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUser",
			Handler:    _StatisticsService_DeleteUser_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _StatisticsService_DeletePost_Handler,
		},
		{
			MethodName: "GetPostStatistics",
			Handler:    _StatisticsService_GetPostStatistics_Handler,
		},
		{
			MethodName: "GetTopKPosts",
			Handler:    _StatisticsService_GetTopKPosts_Handler,
		},
		{
			MethodName: "GetTopKUsers",
			Handler:    _StatisticsService_GetTopKUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistics.proto",
}
