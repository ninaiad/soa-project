// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: posts.proto

package posts_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostsServerClient is the client API for PostsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsServerClient interface {
	CreatePost(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*PostId, error)
	UpdatePost(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePost(ctx context.Context, in *AuthoredPostId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPost(ctx context.Context, in *AuthoredPostId, opts ...grpc.CallOption) (*Post, error)
	GetPageOfPosts(ctx context.Context, in *PageOfPostsRequest, opts ...grpc.CallOption) (*PageOfPosts, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type postsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsServerClient(cc grpc.ClientConnInterface) PostsServerClient {
	return &postsServerClient{cc}
}

func (c *postsServerClient) CreatePost(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*PostId, error) {
	out := new(PostId)
	err := c.cc.Invoke(ctx, "/posts_proto.PostsServer/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServerClient) UpdatePost(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts_proto.PostsServer/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServerClient) DeletePost(ctx context.Context, in *AuthoredPostId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts_proto.PostsServer/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServerClient) GetPost(ctx context.Context, in *AuthoredPostId, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/posts_proto.PostsServer/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServerClient) GetPageOfPosts(ctx context.Context, in *PageOfPostsRequest, opts ...grpc.CallOption) (*PageOfPosts, error) {
	out := new(PageOfPosts)
	err := c.cc.Invoke(ctx, "/posts_proto.PostsServer/GetPageOfPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServerClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/posts_proto.PostsServer/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsServerServer is the server API for PostsServer service.
// All implementations must embed UnimplementedPostsServerServer
// for forward compatibility
type PostsServerServer interface {
	CreatePost(context.Context, *CreateRequest) (*PostId, error)
	UpdatePost(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	DeletePost(context.Context, *AuthoredPostId) (*emptypb.Empty, error)
	GetPost(context.Context, *AuthoredPostId) (*Post, error)
	GetPageOfPosts(context.Context, *PageOfPostsRequest) (*PageOfPosts, error)
	DeleteUser(context.Context, *UserId) (*emptypb.Empty, error)
	mustEmbedUnimplementedPostsServerServer()
}

// UnimplementedPostsServerServer must be embedded to have forward compatible implementations.
type UnimplementedPostsServerServer struct {
}

func (UnimplementedPostsServerServer) CreatePost(context.Context, *CreateRequest) (*PostId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostsServerServer) UpdatePost(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostsServerServer) DeletePost(context.Context, *AuthoredPostId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostsServerServer) GetPost(context.Context, *AuthoredPostId) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostsServerServer) GetPageOfPosts(context.Context, *PageOfPostsRequest) (*PageOfPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageOfPosts not implemented")
}
func (UnimplementedPostsServerServer) DeleteUser(context.Context, *UserId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedPostsServerServer) mustEmbedUnimplementedPostsServerServer() {}

// UnsafePostsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsServerServer will
// result in compilation errors.
type UnsafePostsServerServer interface {
	mustEmbedUnimplementedPostsServerServer()
}

func RegisterPostsServerServer(s grpc.ServiceRegistrar, srv PostsServerServer) {
	s.RegisterService(&PostsServer_ServiceDesc, srv)
}

func _PostsServer_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServerServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_proto.PostsServer/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServerServer).CreatePost(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsServer_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServerServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_proto.PostsServer/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServerServer).UpdatePost(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsServer_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthoredPostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServerServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_proto.PostsServer/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServerServer).DeletePost(ctx, req.(*AuthoredPostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsServer_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthoredPostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServerServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_proto.PostsServer/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServerServer).GetPost(ctx, req.(*AuthoredPostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsServer_GetPageOfPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageOfPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServerServer).GetPageOfPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_proto.PostsServer/GetPageOfPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServerServer).GetPageOfPosts(ctx, req.(*PageOfPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsServer_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_proto.PostsServer/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServerServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// PostsServer_ServiceDesc is the grpc.ServiceDesc for PostsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "posts_proto.PostsServer",
	HandlerType: (*PostsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostsServer_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostsServer_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostsServer_DeletePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostsServer_GetPost_Handler,
		},
		{
			MethodName: "GetPageOfPosts",
			Handler:    _PostsServer_GetPageOfPosts_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _PostsServer_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "posts.proto",
}
