version: "3"

services:
  gateway:
    build:
      context: ./src/gateway
      dockerfile: build/gateway.dockerfile
    command: ./main
    ports:
      - 8000:8000
    depends_on:
      gateway-db:
        condition: service_healthy
      posts:
        condition: service_started
      statistics:
        condition: service_started
    environment:
      DB_PASSWORD: ${MAIN_DB_PASSWORD}
      PASSWORD_SALT: ${PASSWORD_SALT}
      TOKEN_SIGNING_KEY: ${TOKEN_SIGNING_KEY}
      POSTS_SERVER_ADDR: posts:51075
      STATISTICS_SERVER_ADDR: statistics:51076
      KAFKA_ADDR: kafka:9092
    restart: on-failure

  gateway-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: ${MAIN_DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ${GATEWAY_DB_VOLUME:?Gateway db volume not set}:/var/lib/postgresql/data:rw
    user: 501:20
    ports:
      - 5432:5432
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=$MAIN_DB_PASSWORD", "psql", "-h", "gateway-db", "-U", "postgres", "-c", "'\\q'"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  posts:
    build:
      context: ./src/posts
      dockerfile: build/posts.dockerfile
    command: ./main
    ports:
      - 51075:51075
    depends_on:
      posts-db:
        condition: service_healthy
    environment:
      DB_PASSWORD: ${POSTS_DB_PASSWORD}
      POSTS_SERVER_PORT: 51075
    restart: on-failure
  
  posts-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: ${POSTS_DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
    - ${POSTS_DB_VOLUME:?Posts db volume not set}:/var/lib/postgresql/data:rw
    user: 501:20
    ports:
      - 5433:5432
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=$POSTS_DB_PASSWORD", "psql", "-h", "posts-db", "-U", "postgres", "-c", "'\\q'"]
      interval: 5s
      timeout: 5s
      retries: 5

  statistics:
    build:
      context: ./src/statistics
      dockerfile: build/statistics.dockerfile
    command: ./main
    ports:
      - 8081:8081
      - 51076:51076
    depends_on:
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment:
      DB_PASSWORD: ${CLICKHOUSE_PASSWORD}
      KAFKA_ADDR: kafka:9092
      STATISTICS_SERVER_PORT: 51076
    restart: on-failure

  clickhouse:
    image: 'clickhouse/clickhouse-server:latest'
    container_name: clickhouse
    hostname: clickhouse
    environment:
      - CLICKHOUSE_USER=statistics
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DB=statistics
    volumes:
      - ${CLICKHOUSE_DB_VOLUME:?Clickhouse volume path not set}:/var/lib/clickhouse/
    ports:
      - 8123:8123
      - 9000:9000
    user: 501:20
    restart: always
    attach: false
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper:
     image: confluentinc/cp-zookeeper:latest
     environment:
       ZOOKEEPER_CLIENT_PORT: 2181
       ZOOKEEPER_TICK_TIME: 2000
     restart: always
     attach: false
     ports:
       - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      TOPIC_AUTO_CREATE: true
    restart: always
    attach: false
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 50

  e2e-tests:
    build:
      context: tests/e2e
      dockerfile: e2e.dockerfile
    environment:
      SERVER_ADDR: http://gateway:8000
    depends_on:
      gateway:
        condition: service_started

  posts-tests:
    build:
      context: ./tests/posts_tests
      dockerfile: posts.dockerfile
    depends_on:
      posts:
        condition: service_started
    environment:
      POSTS_SERVER_ADDR: posts:51075
