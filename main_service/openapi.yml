openapi: 3.0.3
info:
  title: Social Network Main Service REST API
  description: |-
    This is the API description for the main service of a mini Social Network, it handles authorisation of the users.
    
    [The Social Network project repository](https://github.com/ninaiad/soa-project)
  version: 1.0.0

tags:
  - name: user
    description: Operations about user
  - name: posts
    description: Operations on user's posts

paths:
  /sign-up:
    post:
      tags:
        - user
      summary: Creates user and logs them in
      requestBody:
        description: The only obligatory fields are username and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              minimal:
                summary: Minimal example
                value:
                  username: bluefinch11
                  password: vEryStr0ngP4ssw0Rd1ndEEd
              Full Version:
                $ref: '#/components/schemas/User'

      responses:
        '200':
          description: "Successful operation: logs the user in and returns Bearer token"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTAzMDQyODksImlhdCI6MTcxMDI2MTA4OSwidXNlcl9pZCI6MX0.UPcmCBOs46im7zGz3gjQmkp4MXzE7jw5Z72aJMqDTP0",
                  "user_id": 13
                }
        '400':
          description: "Wrong input format: password or username not supplied or input fields are incorrect"
        '500':
          description: Internal server error
  /sign-in:
    post:
      tags:
        - user
      summary: Log user into the system
      requestBody:
        description: Username and password for this user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInInput'

      responses:
        '200':
          description: "Successful operation: logs the user in and returns Bearer token"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTAzMDQyODksImlhdCI6MTcxMDI2MTA4OSwidXNlcl9pZCI6MX0.UPcmCBOs46im7zGz3gjQmkp4MXzE7jw5Z72aJMqDTP0",
                  "user_id": 13
                }
        '400':
          description: Wrong input format or user with provided username and password doesn't exist
  /user:
    put:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Update user data
      description: Operation accessible only to logged in users
      requestBody:
        description: Update public data of an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPublic'
            examples:
              Minamal Example:
                summary: Minimal example
                value:
                  name: LÃ¦rke
              Full Version:
                $ref: '#/components/schemas/UserPublic'
      responses:
        '200':
          description: "Successful operation: returns all visible public user data, including the fields that weren't updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
        '400':
          description: Wrong input format
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /post:
    post:
      security:
        - bearerAuth: []
      tags:
        - posts
      summary: Create a new post
      description: Operation accessible only to logged in users
      requestBody:
        description: Post data
        content:
          application/json:
              schema:
                type: object
                example: {"text" : "My first post! Hello world!"}
      responses:
        '200':
          description: "Successful operation: returns new post id"
          content:
            application/json:
              schema:
                type: object
                example: {"post_id" : 123}
        '400':
          description: Wrong input format
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /post{id}{author_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - posts
      summary: Get a post
      description: Operation accessible only to logged in users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id of the post to get
        - in: path
          name: author_id
          schema:
            type: integer
          required: false
          description: Author of the post id. If not specified the logged in user's id is used instead
      responses:
        '200':
          description: "Successful operation: returns the post data"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "text" : "My first post! Hello world!",
                  "time_updated": "2024-03-18T21:54:42.123Z"
                }
        '400':
          description: Wrong input format
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /post{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - posts
      summary: Update an existing post
      description: Operation accessible only to logged in users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id of the post to update
      requestBody:
        description: New post data
        content:
          application/json:
              schema:
                type: object
                example: {
                  "text" : "My first post! Hello world!"
                }
      responses:
        '200':
          description: Successful operation
        '400':
          description: Wrong input format
        '500':
          description: Internal server error
    delete:
      security:
        - bearerAuth: []
      tags:
        - posts
      summary: Delete an existing post
      description: Operation accessible only to logged in users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id of the post to delete
      responses:
        '200':
          description: Successful operation
        '400':
          description: Wrong input format
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /posts{page_num}{page_size}{author_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - posts
      summary: Get a page of posts of the logged in user
      description: Operation accessible only to logged in users
      parameters:
        - in: path
          name: page_num
          schema:
            type: integer
          required: true
          description: Page number
        - in: path
          name: page_size
          schema:
            type: integer
          required: true
          description: Number of posts on a page
        - in: path
          name: author_id
          schema:
            type: integer
          required: false
          description: Author of the post id. If not specified the logged in user's id is used instead
      responses:
        '200':
          description: "Successful operation: returns the post data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPosts'
        '400':
          description: Wrong input format
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /view{post_id}{author_id}:
    post:
      security:
        - bearerAuth: []
      tags:
        - posts
      summary: Add a view to a post
      description: Operation accessible only to logged in users
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      - in: path
        name: author_id
        schema:
          type: integer
        required: false
        description: Author of the post id. If not specified the logged in user's id is used instead
      responses:
        '200':
          description: "Successful operation: returns new post id"
          content:
            application/json:
              schema:
                type: object
                example: {"status" : "ok"}
        '400':
          description: Wrong input format
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /like{post_id}{author_id}:
    post:
      security:
        - bearerAuth: []
      tags:
        - posts
      summary: Add a view to a post
      description: Operation accessible only to logged in users
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      - in: path
        name: author_id
        schema:
          type: integer
        required: false
        description: Author of the post id. If not specified the logged in user's id is used instead
      responses:
        '200':
          description: "Successful operation: returns new post id"
          content:
            application/json:
              schema:
                type: object
                example: {"status" : "ok"}
        '400':
          description: Wrong input format
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: bluefinch11
        password:
          type: string
          example: 'vEryStr0ngP4ssw0Rd1ndEEd'
        name:
          type: string
          example: Ida
        surname:
          type: string
          example: Blue
        birthday:
          description: Date in ISO8601 format
          type: string
          example: '2001-02-18T21:54:42.123Z'
        email:
          type: string
          example: ida@something.com
        phone:
          type: string
          example: '+453099572654'
    SignInInput:
      type: object
      properties:
        username:
          type: string
          example: bluefinch11
        password:
          type: string
          example: 'vEryStr0ngP4ssw0Rd1ndEEd'
    UserPublic:
      properties:
        name:
          type: string
          example: LÃ¦rke
        surname:
          type: string
          example: BjÃ¸rn
        birthday:
          description: Date in ISO8601 format
          type: string
          example: '2001-02-18T21:54:42.123Z'
        email:
          type: string
          example: some@email.com
        phone:
          type: string
          example: '+453489572923'
    PageOfPosts:
      properties:
        page_num:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 5
        posts:
          type: array
          items:
            type: object
            example: {
              "text" : "My first post! Hello world!",
              "time_updated": "2024-03-18T21:54:42.123Z"
            }

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []